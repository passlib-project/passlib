=================================================================================
:mod:`passlib.hash.ext_des_crypt` - BSDi Extended DES Crypt
=================================================================================

.. module:: passlib.hash.ext_des_crypt
    :synopsis: BSDi Extended Unix (DES) Crypt

This algorithm was developed by BSDi for their BSD/OS distribution.
It's based on :mod:`~passlib.hash.des_crypt`, contains many modern improvements.
Nonetheless, since it's based on DES, and still shared many of des-crypt's flaws,
it should not be used in new applications.

Usage
=====
Aside from differences in format and salt size,
ext-des-crypt usage is exactly the same as :mod:`~passlib.hash.des_crypt`.

.. todo::

    show examples when specifying number of rounds

Functions
=========
.. autofunction:: genconfig
.. autofunction:: genhash
.. autofunction:: encrypt
.. autofunction:: identify
.. autofunction:: verify

Format
======
A ext-des-crypt hash string consists of an underscore ``_``, followed
by 20 characters, drawn from ``[0-9a-zA-Z./]``.
The first 4 characters after the underscore form a :mod:`hash64 <passlib.utils.h64>`-encoded
24 bit integer determining the number of rounds.
The next 4 characters form a hash64-encoded
24 bit integer determining the salt.
The final 11 characters form a hash64-encoded 64-bit integer checksum.

A ext-des-crypt configuration string is also accepted by this module,
and has the same format as the hash string, but with the final 11 checksum characters.

An example hash (of ``password``) is ``_EQ0.jzhSVeUyoSqLupI``, where the rounds
are encoded in ``EQ0.`` (=10000), the salt is ``jzhS``, and the checksum
is ``VeUyoSqLupI``.

Algorithm
=========
The checksum is formed by a modified version of the DES cipher in encrypt mode:

* First, the lower 7 bits of the first 8 characters of the password are used
  to form a 56-bit DES key, as in des-crypt.

* Unlike des-crypt, the remainder of the password is also used. For every additional
  8 characters in the password, the key is encrypted using a single round of DES,
  with itself as the input block. It is then xor'ed against the lower 7 bits
  of the next 8 characters in the password.

* The checksum is then generated by recursively performing a variable number rounds of DES encryption
  starting with a null input block. The 24 bits of salt are used to mutate
  the action performed by each block of the DES key schedule (see the source
  of :func:`~passlib.utils.des.mdes_encrypt_int_block` for details).

* The rounds, salt, and checksum are then encoded according the format as described above.

Deviations
==========
This implementation of ext-des-crypt differs from others in a few ways:

* Unicode strings are encoded using UTF-8 before being passed into the algorithm.
  The original ext-des-crypt was designed for 7-bit us-ascii, so this should not
  conflict with most existing hashes. As of this writing, the authors
  know of no specification defining the official behavior that should be used
  in this situtation.

References
==========
* `<http://fuse4bsd.creo.hu/localcgi/man-cgi.cgi?crypt+3>`_ - primary source used for description of ext-des-crypt format & algorithm
