============================================
:mod:`passlib.unix` - Unix Password Handling
============================================

.. module:: passlib.unix
    :synopsis: frontend for encrypting & verifying passwords on unix systems

Contexts
========
This module provides some pre-configured :class:`CryptContext` instances,
tailor to the hashes supported on various unix systems.

.. object:: linux_context

    this should recognize the hashes used on most linux systems:
    :mod:`~passlib.hash.des_crypt`,
    :mod:`~passlib.hash.md5_crypt`,
    :mod:`~passlib.hash.sha256_crypt`, and
    :mod:`~passlib.hash.sha512_crypt` (used as the default).

.. object:: bsd_context

    this should recognize the hashes used on most bsd systems:
    :mod:`~passlib.hash.des_crypt`,
    :mod:`~passlib.hash.ext_des_crypt`,
    :mod:`~passlib.hash.nthash`,
    :mod:`~passlib.hash.md5_crypt`,
    :mod:`~passlib.hash.bcrypt` (used as the default).

.. note::

    The above contexts will also recognize password hashes
    of the form ``!`` or ``*`` as belonging to a special
    ``unix-disabled`` handler, whose ``verify()`` method
    always returns ``False``.

Usage
=====

.. todo::

    show usage example


.. _modular-crypt-format:

Modular Crypt Format
====================
A vast majority of the schemes used on unix systems (and supported by this library)
follow the "Modular Crypt Format", introduced around the time :mod:`~passlib.hash.md5_crypt` was developed.
This scheme allows hashes generates by multiple schemes to co-exist within a database,
by requiring that all hash string begin with a unique prefix ``$identifier$``;
where ``identifier`` is a short alphanumeric string globally identifying
hashes generated by that algorithm.

While not part of the specification, most modular crypt -compatible hashes
were designed to be used by unix systems to store user account passwords
in ``/etc/passwd`` or ``/etc/shadow``. Because of this, most of them
follow another defacto limitations: they avoid using the characters
``:``, ``\n``, and ``\x00`` anywhere in their encoded hash.
In fact, for the most part they avoid using any characters except
``a-zA-Z0-9./``, and ``$`` as an internal separator, though
this can be violated on some systems if the user intervenes.

.. note::
    :mod:`passlib.hash.des_crypt` and :mod:`passlib.hash.ext_des_crypt`
    do not follow this protocol, since they predate it by many years.
